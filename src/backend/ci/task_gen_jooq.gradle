/*
 * Tencent is pleased to support the open source community by making BK-CI 蓝鲸持续集成平台 available.
 *
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * BK-CI 蓝鲸持续集成平台 is licensed under the MIT license.
 *
 * A copy of the MIT License is included in this file.
 *
 *
 * Terms of the MIT License:
 * ---------------------------------------------------
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of
 * the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

apply plugin: 'nu.studer.jooq'

dependencies {
    compile "org.jooq:jooq"
    jooqRuntime "mysql:mysql-connector-java"
}

def moduleName = name.split('-')[1]
//if (moduleName == "store") {
//    moduleName = "atom"
//}
def databaseName = moduleName
def mysqlPrefix = System.getProperty("mysqlPrefix")
if (mysqlPrefix != null && mysqlPrefix != "") {

    println "jooq build env :" + mysqlPrefix
    databaseName = mysqlPrefix + databaseName
} else {
    databaseName = "${DB_PREFIX}${databaseName}"    
}

jooq {
    genenrate(sourceSets.main) {

        jdbc {
            driver = 'com.mysql.jdbc.Driver'
            def mysqlURL = System.getProperty("mysqlURL")
            def mysqlUser = System.getProperty("mysqlUser")
            def mysqlPasswd = System.getProperty("mysqlPasswd")

            if (mysqlURL == null) {
                mysqlURL = System.getenv("mysqlURL")
                mysqlUser = System.getenv("mysqlUser")
                mysqlPasswd = System.getenv("mysqlPasswd")
            }

            if (mysqlURL == null) {
                println "use default mysql database."
                mysqlURL = DB_HOST
                mysqlUser = DB_USERNAME
                mysqlPasswd = DB_PASSWORD
            }

            url = "jdbc:mysql://${mysqlURL}/${databaseName}?useSSL=false"
            user = mysqlUser
            password = mysqlPasswd
        }

        generator {
            name = 'org.jooq.codegen.DefaultGenerator'

            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = "${databaseName}"
            }

            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }

            generate {
                relations = false
                deprecated = false
                fluentSetters = true
                generatedAnnotation = false
                javaTimeTypes = true
            }

            target {
                packageName = "com.tencent.devops.model.${moduleName}"
            }
        }
        tasks.generateGenenrateJooqSchemaSource.outputs.upToDateWhen { return false }
    }
}
