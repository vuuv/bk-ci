/*
 * Tencent is pleased to support the open source community by making BK-CI 蓝鲸持续集成平台 available.
 *
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * BK-CI 蓝鲸持续集成平台 is licensed under the MIT license.
 *
 * A copy of the MIT License is included in this file.
 *
 *
 * Terms of the MIT License:
 * ---------------------------------------------------
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of
 * the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import org.ajoberstar.grgit.Grgit

buildscript {
    ext {
        kotlinVersion = "1.2.10"
        gradleShadowVersion = "2.0.2"
        jooqVersion = "3.12.3"
        gradleJooqVersion = "3.0.3"
        gradleDependencyVersion = "1.0.4.RELEASE"
        springBootVersion = "1.5.11.RELEASE"
        springBootRedisVersion = "1.5.11.RELEASE"
        springConsulVersion = "1.3.0.RELEASE"
        swaggerVersion = "1.5.17"
        jaxrsVersion = "2.0"
        jacksonVersion = "2.9.10"
        esVersion = "7.0.0"
        searchGuardSSLVersion = "5.6.14-23"
        hashidsVersion = "1.0.3"
        feignVersion = "9.5.1"
        vmwareVersion = "5.1"
        feignFormVersion = "3.8.0"
        okHttpVersion = "3.9.1"
        commonExecVersion = "1.3"
        bouncyCastleVersion = "1.46"
        dom4jVersion = "1.6.1"
        slf4jVersion = "1.7.25"
        mockitoVersion = "1.10.19"
        httpclientVersion = "4.5.2"
        compressVersion = "1.15"
        jjwtVersion = "0.9.0"
        jsonLibVersion = "2.4"
        commonLang3Version = "3.5"
        guavaVersion = "21.0"
        cronutilsVersion = "7.0.1"
        reflectionsVersion = "0.9.11"
        jsonSchemaVersion = "2.2.6"
        logbackVersion = "1.1.11"
        jasyptVersion = "2.0.0"
        jolokiaVersion = "1.6.0"
        awsS3Version = "1.11.461"
        asyncHttpClientVersion = "2.1.0"
        poiVersion = "3.17"
        sigarVersion = "1.7.0.0"
        poiVersion = "3.17"
        commonLang3Version = "3.5"
        luceneVersion = "8.6.0"
    }

    def mavenRepoUrl = System.getProperty("mavenRepoUrl")
    if (mavenRepoUrl == null) {
        mavenRepoUrl = System.getenv("mavenRepoUrl")
    }
    if (mavenRepoUrl == null) {
        mavenRepoUrl = MAVEN_REPO_URL
    }

    repositories {
        mavenLocal()
        maven { url mavenRepoUrl }
        maven { url "https://repo.spring.io/libs-milestone" }
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "nu.studer:gradle-jooq-plugin:$gradleJooqVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$gradleDependencyVersion"
        classpath "com.github.jengelman.gradle.plugins:shadow:$gradleShadowVersion"
        classpath 'org.ajoberstar:grgit:1.1.0'
    }
}

ext {
    commit = null
    // Open the Git repository in the current directory.
    def gitDir = file('../../../.git')
    if (gitDir.exists()) {
        gitDir = file('../../../')
        git = Grgit.open(gitDir)

        commit = git.head()
        // Alternative is using abbreviatedId of head() method.
        // revision = git.head().abbreviatedId
    }
}

allprojects {
    group "com.tencent.bk.devops.ci"
    version "1.3.0"
    // 修改为通过JVM启动构建时系统变量，或者从gradle.properties配置文件中读取
    // 1. try read ci_version in jvm -Dci_version
    def devops_version = System.getProperty("ci_version")
    // 2. try read [CI_VERSION_IN_GRADLE_PROPERTIES] in gradle.properties
    if (devops_version != null) {
        version = devops_version
    }

    def snapshot = System.getProperty("snapshot")
    if (snapshot == "true") {
        version = version + "-SNAPSHOT"
    } else {
        version = version + "-RELEASE"
    }

    def mavenRepoUrl = System.getProperty("mavenRepoUrl")
    if (mavenRepoUrl == null) {
        mavenRepoUrl = System.getenv("mavenRepoUrl")
    }
    if (mavenRepoUrl == null) {
        mavenRepoUrl = MAVEN_REPO_URL
    }

    repositories {
        mavenLocal()
        maven { url mavenRepoUrl }
        maven { url "https://repo.spring.io/libs-milestone" }
        mavenCentral()
        jcenter()
    }

    def createDir = {
        path ->
            File f = new File(path)
            if (!f.exists())
                f.mkdirs()
    }

    /**
     * 创建kotlin代码库路径
     **/
    task createCodeDirs() {
        def paths = ["src/main/java", "src/main/kotlin", "src/main/resources", "src/test/java", "src/test/kotlin", "src/test/resources"]
        paths.forEach(createDir)
    }
}

subprojects {
    apply plugin: "idea"
    apply plugin: "java"
    apply plugin: "kotlin"
    apply plugin: "maven"
    apply plugin: "kotlin-spring"
    apply plugin: "io.spring.dependency-management"

    //noinspection GroovyAssignabilityCheck
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
            javaParameters = true
        }
    }

    tasks.withType(JavaCompile).all {
        options.encoding = "UTF-8"
        options.compilerArgs.add '-parameters'
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    jar.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
    uploadArchives.onlyIf { !sourceSets.main.allSource.files.isEmpty() }
    // boot-xxx biz-xxx model-xxxx do not install
    install.onlyIf { !sourceSets.main.allSource.files.isEmpty() && !name.startsWith("model-") && !name.startsWith("boot-") && !name.startsWith("biz-") }

    configurations {
        ktlint
        all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
        all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
        all*.exclude group: "org.apache.tomcat", module: "tomcat-jdbc"
        all*.exclude group: "org.slf4j", module: "log4j-over-slf4j"
        all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
        all*.exclude group: "org.slf4j", module: "slf4j-nop"
    }

    dependencies {
        ktlint "com.github.shyiko:ktlint:0.29.0"
        // https://mvnrepository.com/artifact/com.github.shyiko/ktlint
        testCompile group: 'com.github.shyiko', name: 'ktlint', version: '0.29.0'
        testCompile "junit:junit"
    }

    task ktlint(type: JavaExec, group: "verification") {
        description = "Check Kotlin code style."
        classpath = configurations.ktlint
        main = "com.github.shyiko.ktlint.Main"
        args "src/**/*.kt"
        // to generate report in checkstyle format prepend following args:
        // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
        // see https://github.com/shyiko/ktlint#usage for more
    }

    task ktlintFormat(type: JavaExec, group: "formatting") {
        description = "Fix Kotlin code style deviations."
        classpath = configurations.ktlint
        main = "com.github.shyiko.ktlint.Main"
        args "-F", "src/**/*.kt"
    }


    dependencyManagement {
        applyMavenExclusions = false

        dependencies {
            imports {
                mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
            }
            dependency "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
            dependency "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
            dependency "com.google.guava:guava:$guavaVersion"
            dependency "com.floragunn:search-guard-ssl:$searchGuardSSLVersion"
            dependency "org.elasticsearch:elasticsearch:$esVersion"
            dependency "org.elasticsearch.client:elasticsearch-rest-client:$esVersion"
            dependency "org.elasticsearch.client:elasticsearch-rest-high-level-client:$esVersion"
            dependency "org.hashids:hashids:$hashidsVersion"
            dependency "javax.ws.rs:javax.ws.rs-api:$jaxrsVersion"
            dependency "com.squareup.okhttp3:okhttp:$okHttpVersion"
            dependency "org.apache.httpcomponents:httpclient:$httpclientVersion"
            dependency "org.apache.commons:commons-exec:$commonExecVersion"
            dependency "com.vmware:vijava:$vmwareVersion"
            dependency "org.bouncycastle:bcprov-jdk16:$bouncyCastleVersion"
            dependency "dom4j:dom4j:$dom4jVersion"
            dependency "org.apache.commons:commons-compress:$compressVersion"
            dependency "org.reflections:reflections:$reflectionsVersion"
            dependency "com.github.fge:json-schema-validator:$jsonSchemaVersion"
            dependency "com.github.ulisesbocchio:jasypt-spring-boot-starter:$jasyptVersion"
            dependency "org.jolokia:jolokia-core:$jolokiaVersion"
            dependency("org.apache.commons:commons-lang3:${commonLang3Version}")
            dependency("org.jooq:jooq:$jooqVersion")
            dependency("org.apache.lucene:lucene-core:$luceneVersion")

            dependencySet(group: "org.springframework.cloud", version: "$springConsulVersion") {
                entry "spring-cloud-starter-consul-discovery"
                entry "spring-cloud-starter-consul-core"
                entry "spring-cloud-starter-config"
                entry "spring-cloud-config-server"
            }
            dependencySet(group: "io.swagger", version: "$swaggerVersion") {
                entry "swagger-annotations"
                entry "swagger-jersey2-jaxrs"
            }
            dependencySet(group: "com.fasterxml.jackson.module", version: "$jacksonVersion") {
                entry "jackson-module-kotlin"
            }
            dependencySet(group: "com.fasterxml.jackson.core", version: "$jacksonVersion") {
                entry "jackson-core"
                entry "jackson-databind"
                entry "jackson-annotations"
            }
            dependencySet(group: "com.fasterxml.jackson.jaxrs", version: "$jacksonVersion") {
                entry "jackson-jaxrs-json-provider"
                entry "jackson-jaxrs-base"
            }
            dependencySet(group: "io.github.openfeign", version: "$feignVersion") {
                entry "feign-jaxrs"
                entry "feign-okhttp"
                entry "feign-jackson"
            }
            dependencySet(group: "io.github.openfeign.form", version: "$feignFormVersion") {
                entry "feign-form"
                entry "feign-form-spring"
            }
            dependencySet(group: "org.slf4j", version: "$slf4jVersion") {
                entry "slf4j-api"
                entry "slf4j-simple"
            }
            dependencySet(group: "io.jsonwebtoken", version: "$jjwtVersion") {
                entry "jjwt"
            }
            dependencySet(group: 'org.mockito', version: "$mockitoVersion") {
                entry "mockito-all"
            }
            dependencySet(group: 'net.sf.json-lib', version: "$jsonLibVersion") {
                entry "json-lib"
            }
            dependencySet(group: 'com.cronutils', version: "$cronutilsVersion") {
                entry "cron-utils"
            }
            dependencySet(group: 'ch.qos.logback', version: "$logbackVersion") {
                entry "logback-core"
                entry "logback-classic"
            }
            dependencySet(group: 'org.springframework.boot', version: "$springBootRedisVersion") {
                entry "spring-boot-starter-data-redis"
            }
            dependencySet(group: 'com.amazonaws', version: "$awsS3Version") {
                entry "aws-java-sdk-s3"
            }
            dependencySet(group: 'org.asynchttpclient', version: "$asyncHttpClientVersion") {
                entry "async-http-client"
            }
            dependencySet(group: 'org.apache.poi', version: "$poiVersion") {
                entry "poi"
                entry "poi-ooxml"
            }
            dependencySet(group: 'com.tencent.devops.ci-plugins', version: "$sigarVersion") {
                entry "sigar"
            }
            dependencySet(group: 'org.apache.poi', version: "$poiVersion") {
                entry "poi"
                entry "poi-ooxml"
            }
        }
    }
}
